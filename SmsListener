package com.ehulian.dev.zhcard.soa.listener;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.aliyuncs.dysmsapi.model.v20170525.QuerySendDetailsResponse;
import com.aliyuncs.dysmsapi.model.v20170525.SendSmsResponse;
import com.aliyuncs.exceptions.ClientException;
import com.ehulian.dev.zhcard.core.service.SmslogService;
import com.ehulian.dev.zhcard.model.Smslog;
import com.ehulian.dev.zhcard.soa.util.SmsUtil;
import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import java.util.*;
import java.util.concurrent.*;

@Slf4j
@Component
public class SmsListener {

    private Logger logger = LoggerFactory.getLogger(SmsListener.class);

    @Autowired
    private SmsUtil smsUtil;

    @Autowired
    private SmslogService smslogService;

    private volatile LinkedBlockingQueue<Map<String, Object>> queue;
    private QueryTask queryTask;
    
    @RabbitListener(queues = "cn.yhulian.zhsms")
    public void sendSms(Map<String, Object> map) {
        log.info(JSON.toJSONString(map), SerializerFeature.PrettyFormat);
        try {
            //发送短信
            map.put("send_count", 0);//发送次数
            map.put("query_count", 0);//查询次数
            sendSMS(map);
        } catch (Exception e) {
            e.printStackTrace();
        }
      }
      
      /**
     * 发送短信
     *
     * @param map
     * @throws ClientException
     */
    private void sendSMS(Map<String, Object> map) throws Exception {
     int send_count = (int) map.get("send_count");
        if (send_count > 3) return;
        // ++count;
        String mobile = (String) map.get("mobile");
        String templateCode = (String) map.get("templateCode");
        String signName = (String) map.get("signName");
        String templateParam = (String) map.get("templateParam");
        SendSmsResponse response = smsUtil.sendSms(mobile, templateCode, signName, templateParam);
         map.put("send_count", ++send_count);//发送次数
        //加入到查询队列
        if (!map.containsKey("is_first")) {
            map.put("is_first", true);
        }
        if (!map.containsKey("start_time")) {
            map.put("start_time", System.currentTimeMillis());
        }
        map.put("send_response", response);
        //放入查询任务队列
        putQueryStatusQueue(map);
    }
    
     /**
     * 查询发送状态
     *
     * @throws ClientException
     */
    private void getSendStatus(Map<String, Object> map) throws Exception {
        int query_count = (int) map.get("query_count");
        if (query_count > 3) return;
        SendSmsResponse response = (SendSmsResponse) map.get("send_response");
        QuerySendDetailsResponse querySendDetailsResponse = smsUtil.querySendDetails((String) map.get("mobile"), response.getBizId(), new Date());
        map.put("query_count", ++query_count);//查询次数
        QuerySendDetailsResponse.SmsSendDetailDTO smsSendDetailDTO = querySendDetailsResponse.getSmsSendDetailDTOs().get(0);
        long status = smsSendDetailDTO.getSendStatus();
        if (status == 1) {//发送中
            log.info("=================" + map.get("mobile") + "进入发送中" + new Date().toLocaleString() + "==================");
            putQueryStatusQueue(map);
        } else if (status == 2) {//发送失败
            log.info("=================" + map.get("mobile") + "进入发送失败" + new Date().toLocaleString() + "==================");
            sendSMS(map);
            saveSmsLog(map, response, querySendDetailsResponse);
        } else {//发送成功
            log.info("=================" + map.get("mobile") + "进入发送成功" + new Date().toLocaleString() + "==================");
            saveSmsLog(map, response, querySendDetailsResponse);
        }
    }
    
    /**
     * 发送成功保存记录
     */
    private void saveSmsLog(Map<String, Object> map, SendSmsResponse response, QuerySendDetailsResponse querySendDetailsResponse) {

        String ip = (String) map.get("ip");
        String source = (String) map.get("source");
        String mobile = (String) map.get("mobile");
        String templateParam = (String) map.get("templateParam");
         //记录发送日志
        Smslog smsLog = new Smslog();
        smsLog.setBizId(response.getBizId());
        smsLog.setCode(response.getCode());
        smsLog.setCreateTime(new Date());
        smsLog.setIp(ip);
        smsLog.setMessage(response.getMessage());
        smsLog.setMobile(mobile);
        smsLog.setParams(templateParam);
        smsLog.setRequestId(response.getRequestId());
        smsLog.setSource(source);
        smsLog.setBackCode(querySendDetailsResponse.getCode());
        smsLog.setBackMessage(querySendDetailsResponse.getMessage());
        smsLog.setBackRequestId(querySendDetailsResponse.getRequestId());
        QuerySendDetailsResponse.SmsSendDetailDTO smsSendDetailDTO = querySendDetailsResponse.getSmsSendDetailDTOs().get(0);
        smsLog.setBackContent(smsSendDetailDTO.getContent());
        smsLog.setBackErrCode(smsSendDetailDTO.getErrCode());
        smsLog.setBackOutId(smsSendDetailDTO.getOutId());
        smsLog.setBackPhone(smsSendDetailDTO.getPhoneNum());
        smsLog.setBackReceiveDate(smsSendDetailDTO.getReceiveDate());
        smsLog.setBackSendDate(smsSendDetailDTO.getSendDate());
        smsLog.setBackSendStatus(smsSendDetailDTO.getSendStatus());
        smsLog.setBackTemplateCode(smsSendDetailDTO.getTemplateCode());
        smslogService.save(smsLog);
    }
    
    /**
     * 加入到任务队列
     *
     * @param map
     */
    private void putQueryStatusQueue(Map<String, Object> map) {
        if (queue == null) {
            queue = new LinkedBlockingQueue<>();
            queryTask = new QueryTask();
            queryTask.start();
        }
        boolean offer = queue.offer(map);
        if (!offer) {
            queue.clear();
        }
        queue.offer(map);
        if (!queryTask.isAlive()) {
            queryTask.run();
        }
    }
    
    private final class QueryTask extends Thread {
        @Override
        public void run() {
            while (!queue.isEmpty()) {
                try {
                    Thread.sleep(5000);
                    Map<String, Object> map = queue.take();
                    boolean is_first = (boolean) map.get("is_first");
                    long start_time = (long) map.get("start_time");
                    if (is_first) {//第一次查询
                        map.put("is_first", false);
                        getSendStatus(map);
                    } else if (System.currentTimeMillis() - start_time > 600000) {//非第一次查询10min查询一次
                        getSendStatus(map);
                    } else {//不满足条件放回队列
                        queue.put(map);
                    }
                    } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

}
